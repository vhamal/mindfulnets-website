var Meditation = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="meditation">
        <h2 className="meditationOrganizer">
          {this.props.creator}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var MeditationBox = React.createClass({
  loadMeditationsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleMeditationSubmit: function(meditation) {
    var meditations = this.state.data;
    // Optimistically set an id on the new meditation. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    meditation.id = Date.now();
    var newMeditations = meditations.concat([meditation]);
    this.setState({data: newMeditations});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: meditation,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: meditations});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadMeditationsFromServer();
    setInterval(this.loadMeditationsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="meditationBox">
        <h1>Meditation sessions</h1>
        <MeditationList data={this.state.data} />
        <MeditationCreationForm onMeditationSubmit={this.handleMeditationSubmit} />
      </div>
    );
  }
});

var MeditationList = React.createClass({
  render: function() {
    var meditationNodes = this.props.data.map(function(meditation) {
      return (
        <Meditation creator={meditation.creator} key={meditation.id}>
          {meditation.startTimestamp}
        </Meditation>
      );
    });
    return (
      <div className="meditationList">
        {meditationNodes}
      </div>
    );
  }
});

var MeditationCreationForm = React.createClass({
  handleSubmit: function(e) {
    e.preventDefault();
    var creator = this.refs.creator.value.trim();
    var startTimestamp = this.refs.startTimestamp.value.trim();
    if (!startTimestamp || !creator) {
      return;
    }
    this.props.onMeditationSubmit({creator: creator, startTimestamp: startTimestamp});
    this.refs.creator.value = '';
    this.refs.startTimestamp.value = '';
  },
  render: function() {
    return (
      <form className="meditationCreationForm" onSubmit={this.handleSubmit}>
        <input type="text" placeholder="Your name" ref="creator" />
        <input type="date" placeholder="Say something..." ref="startTimestamp" />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

ReactDOM.render(
  <MeditationBox url="/api/meditations" pollInterval={2000} />,
  document.getElementById('content')
);
